// ---------- GENERATOR & DATASOURCE ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// ---------- ARTICULOS ----------
//

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.LongText
  description String
  language    String
  imageUrl    String   @db.Text
  amazonLink  String
  products    Json
  createdAt   DateTime @default(now())

  categories ArticleCategory[] // Relación N:M
}

model ArticleCategory {
  id         String   @id @default(cuid())
  articleId  String
  categoryId String
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([articleId, categoryId])
  @@map("ArticleCategory")
}

//
// ---------- MODELOS PRINCIPALES ----------
//

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  username      String    @unique
  emailVerified DateTime?

  preferences      Preferences?
  messages         Message[]            @relation("UserMessages")
  receivedMessages Message[]            @relation("UserReceivedMessages")
  conversations    UserOnConversation[] @relation("UserConversations")
  accounts         Account[]            @relation("UserAccounts")
  sessions         Session[]            @relation("UserSessions")

  followers Follower[] @relation("followedBy")
  following Follower[] @relation("follows")

  sentNotifications     Notification[] @relation("NotificationFromUser")
  receivedNotifications Notification[] @relation("ReceivedNotifications")

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Story          Story[]
  StoryView      StoryView[]
  StoryImageView StoryImageView[]

  posts         Post[]
  postLikes     PostLike[]
  postBookmarks PostBookmark[]
  comments      Comment[]
  commentLikes  CommentLike[]
  mentionedIn   Post[]         @relation("MentionedUsers")

  @@map("Users")
}

//
// ---------- PREFERENCIAS ----------
//

model Preferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  priceRangeMin Int
  priceRangeMax Int

  categories CategoryPreference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("Preferences")
}

model CategoryPreference {
  id            String      @id @default(cuid())
  preferencesId String
  preferences   Preferences @relation(fields: [preferencesId], references: [id])
  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id])
  createdAt     DateTime    @default(now())

  @@unique([preferencesId, categoryId])
  @@map("CategoryPreference")
}

//
// ---------- CATEGORY ----------
//

model Category {
  id       String @id @default(cuid())
  emoji    String
  query    String @unique
  label_es String
  label_en String

  preferences       CategoryPreference[]
  postCategories    PostCategory[]
  storyCategories   StoryCategory[]
  articleCategories ArticleCategory[]

  createdAt DateTime @default(now())
  Story     Story[]
  Post      Post[]
}

//
// ---------- MENSAJERÍA ----------
//

model Conversation {
  id String @id @default(cuid())

  participants UserOnConversation[] @relation("ConversationParticipants")
  messages     Message[]            @relation("ConversationMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Conversation")
}

model UserOnConversation {
  id String @id @default(cuid())

  userId         String
  conversationId String

  user         User         @relation("UserConversations", fields: [userId], references: [id])
  conversation Conversation @relation("ConversationParticipants", fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@map("UserOnConversation")
}

model Message {
  id String @id @default(cuid())

  read    Boolean @default(false)
  content String  @db.Text

  conversationId String
  senderId       String
  receiverId     String

  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  sender       User         @relation("UserMessages", fields: [senderId], references: [id])
  receiver     User         @relation("UserReceivedMessages", fields: [receiverId], references: [id])

  createdAt DateTime @default(now())

  @@map("Message")
}

//
// ---------- SEGUIDORES ----------
//

model Follower {
  id          String   @id @default(cuid())
  follower    User     @relation("follows", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("followedBy", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

//
// ---------- HISTORIAS ----------
//

model Story {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  images      StoryImage[]
  description String
  isGlobal    Boolean      @default(false)
  createdAt   DateTime     @default(now())

  views          StoryView[]
  StoryImageView StoryImageView[]
  Notification   Notification[]

  categoryId    String?
  category      Category?       @relation(fields: [categoryId], references: [id])
  StoryCategory StoryCategory[]

  @@map("Story")
}

model StoryCategory {
  id         String   @id @default(cuid())
  storyId    String
  categoryId String
  story      Story    @relation(fields: [storyId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([storyId, categoryId])
}

model StoryImage {
  id      String @id @default(cuid())
  storyId String
  story   Story  @relation(fields: [storyId], references: [id])
  url     String
  order   Int

  @@map("StoryImage")
}

model StoryImageView {
  id        String   @id @default(cuid())
  userId    String
  storyId   String
  imageUrl  String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  story Story @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId, imageUrl])
  @@map("StoryImageView")
}

model StoryView {
  id      String @id @default(cuid())
  userId  String
  storyId String

  user  User  @relation(fields: [userId], references: [id])
  story Story @relation(fields: [storyId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, storyId])
  @@map("StoryView")
}

//
// ---------- POSTS ----------
//

model Post {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  content      String         @db.Text
  isRepost     Boolean        @default(false)
  repostId     String?
  repost       Post?          @relation("Reposts", fields: [repostId], references: [id])
  reposts      Post[]         @relation("Reposts")
  images       PostImage[]
  gifs         PostGif[]
  mentions     User[]         @relation("MentionedUsers")
  likes        PostLike[]
  bookmarks    PostBookmark[]
  comments     Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  categoryId   String?
  category     Category?      @relation(fields: [categoryId], references: [id])
  PostCategory PostCategory[]

  @@unique([userId, repostId])
  @@map("Post")
}

model PostCategory {
  id         String   @id @default(cuid())
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([postId, categoryId])
}

model PostImage {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  url    String

  @@map("PostImage")
}

model PostGif {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  url    String

  @@map("PostGif")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("PostLike")
}

model PostBookmark {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("PostBookmark")
}

model Comment {
  id           String         @id @default(cuid())
  postId       String
  post         Post           @relation(fields: [postId], references: [id])
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  parentId     String?
  parent       Comment?       @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]      @relation("CommentReplies")
  content      String         @db.Text
  likes        CommentLike[]
  createdAt    DateTime       @default(now())
  Notification Notification[]

  @@map("Comment")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
  @@map("CommentLike")
}

//
// ---------- NOTIFICACIONES ----------
//

model NotificationType {
  id           String                        @id @default(cuid())
  name         String                        @unique
  translations NotificationTypeTranslation[]

  notifications Notification[]

  @@map("NotificationType")
}

model NotificationTypeTranslation {
  id       String @id @default(cuid())
  language String // ej: "es", "en"
  label    String // ej: "Te empezó a seguir", "Started following you"

  notificationTypeId String
  notificationType   NotificationType @relation(fields: [notificationTypeId], references: [id])

  @@unique([language, notificationTypeId])
  @@map("NotificationTypeTranslation")
}

model Notification {
  id String @id @default(cuid())

  typeId String
  type   NotificationType @relation(fields: [typeId], references: [id])

  message String
  isRead  Boolean @default(false)

  userId String
  user   User   @relation("ReceivedNotifications", fields: [userId], references: [id])

  fromUserId String
  fromUser   User   @relation("NotificationFromUser", fields: [fromUserId], references: [id])

  storyId String?
  story   Story?  @relation(fields: [storyId], references: [id])

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())
  metadata  Json

  @@map("Notification")
}

//
// ---------- NEXTAUTH ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}
